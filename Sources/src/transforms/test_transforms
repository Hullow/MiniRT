# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    test_transforms                                    :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: fallan <fallan@student.42.fr>              +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2025/03/21 14:36:33 by francis           #+#    #+#              #
#    Updated: 2025/03/21 18:26:34 by fallan           ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

#include "miniRT.h"

// to run the tests, add .c to this file's name and run: 
// gcc -Wall -Wextra -Werror *.c ../matrices/*.c ../tuples/*tuple*.c ../utils/*.c -lm

void	test_shear();
void	test_translation();
void	test_scaling();
void	test_rotation();
void	test_transforms();
void	analog_clock();

int main()
{
	// test_shear();
	// test_translation();
	// test_scaling();
	// test_rotation();
	// test_transforms();
	// analog_clock();
	return (0);
}

void	analog_clock()
{
	
}

void	test_transforms()
{
	printf("\n*********************************\nTesting chained transformations:\n*********************************\n");
	/* test 1: Individual transformations are applied in sequence
	Given p ← point(1, 0, 1)
	And A ← rotation_x(π / 2)
	And B ← scaling(5, 5, 5)
	And C ← translation(10, 5, 7) */
	t_tuple		*p = rt_point(1, 0, 1);
	t_matrix	*A = rt_rotation_x(90);
	t_matrix	*B = rt_scaling(rt_point(5, 5, 5));
	t_matrix	*C = rt_translation(rt_point(10, 5, 7));
	
	/* apply rotation first
	When p2 ← A * p
	Then p2 = point(1, -1, 0) */
	t_tuple *p2 = matrix_tuple_multiplication(A, p);
	printf("p2: {%3.f, %3.f, %3.f, %3.f}\n", p2->x, p2->y, p2->z, p2->w);

	/* 	then apply scaling
	When p3 ← B * p2
	Then p3 = point(5, -5, 0) */
	t_tuple *p3 = matrix_tuple_multiplication(B, p2);
	printf("p3: {%3.f, %3.f, %3.f, %3.f}\n", p3->x, p3->y, p3->z, p3->w);
	
	/* then apply translation
	When p4 ← C * p3
	Then p4 = point(15, 0, 7) */
	t_tuple *p4 = matrix_tuple_multiplication(C, p3);
	printf("p4: {%3.f, %3.f, %3.f, %3.f}\n", p4->x, p4->y, p4->z, p4->w);
	
	printf("now, chain matrix multiplications and then apply them at once on the initial tuple:\n");
	t_matrix *T = matrix_multiplication(C, matrix_multiplication(B, A));
	t_tuple	 *p0 = matrix_tuple_multiplication(T, p);
	printf("p0: {%3.f, %3.f, %3.f, %3.f}\n", p0->x, p0->y, p0->z, p0->w);
}


void	test_rotation()
{
	printf("\n*********************************\nTesting rotation transformations:\n*********************************\n");
	/* test 1: Rotating a point around the x axis
	Given p ← point(0, 1, 0)
	And half_quarter ← rotation_x(π / 4)
	And full_quarter ← rotation_x(π / 2)
	Then half_quarter * p = point(0, √2/2, √2/2)
	And full_quarter * p = point(0, 0, 1) */
	print_matrix(
				matrix_multiplication(
					rt_rotation_x((M_PI / 4) / (M_PI / 180)), 
					convert_tuple_to_matrix(rt_point(0, 1, 0)))
	);
	print_matrix(
				matrix_multiplication(
					rt_rotation_x((M_PI / 2) / (M_PI / 180)), 
					convert_tuple_to_matrix(rt_point(0, 1, 0)))
	);

	/* test 2: The inverse of an x-rotation rotates in the opposite direction
	Given p ← point(0, 1, 0)
	And half_quarter ← rotation_x(π / 4)
	And inv ← inverse(half_quarter)
	Then inv * p = point(0, √2/2, -√2/2)  */
	print_matrix(
			matrix_multiplication(
				matrix_inversion(rt_rotation_x((M_PI / 4) / (M_PI / 180))), 
				convert_tuple_to_matrix(rt_point(0, 1, 0)))
	);

	/* test 3: Rotating a point around the y axis
	Given p ← point(0, 0, 1)
	And half_quarter ← rotation_y(π / 4)
	And full_quarter ← rotation_y(π / 2)
	Then half_quarter * p = point(√2/2, 0, √2/2)
	And full_quarter * p = point(1, 0, 0) */
	print_matrix(
				matrix_multiplication(
					rt_rotation_y((M_PI / 4) / (M_PI / 180)), 
					convert_tuple_to_matrix(rt_point(0, 0, 1)))
	);
	print_matrix(
				matrix_multiplication(
					rt_rotation_y((M_PI / 2) / (M_PI / 180)), 
					convert_tuple_to_matrix(rt_point(0, 0, 1)))
	);
	/* test 4: Rotating a point around the z axis
	Given p ← point(0, 1, 0)
	And half_quarter ← rotation_z(π / 4)
	And full_quarter ← rotation_z(π / 2)
	Then half_quarter * p = point(-√2/2, √2/2, 0)
	And full_quarter * p = point(-1, 0, 0) */
	print_matrix(
				matrix_multiplication(
					rt_rotation_z((M_PI / 4) / (M_PI / 180)), 
					convert_tuple_to_matrix(rt_point(-1, 0, 0)))
	);
	print_matrix(
				matrix_multiplication(
					rt_rotation_z((M_PI / 2) / (M_PI / 180)), 
					convert_tuple_to_matrix(rt_point(0, 1, 0)))
	);	
}

void	test_scaling()
{
	printf("\n*********************************\nTesting scaling transformations:\n*********************************\n");
	/* test 1: A scaling matrix applied to a point
	Given transform ← scaling(2, 3, 4)
	And p ← point(-4, 6, 8)
	Then transform * p = point(-8, 18, 32) */
	print_matrix(
		matrix_multiplication(
			rt_scaling(rt_point(2, 3, 4)), 
			convert_tuple_to_matrix(rt_point(-4, 6, 8))));
			
	/* test 2: A scaling matrix applied to a vector
	Given transform ← scaling(2, 3, 4)
	And v ← vector(-4, 6, 8)
	Then transform * v = vector(-8, 18, 32) */
	print_matrix(
		matrix_multiplication(
			rt_scaling(rt_vector(2, 3, 4)), 
			convert_tuple_to_matrix(rt_vector(-4, 6, 8))));

	/* test 3: Multiplying by the inverse of a scaling matrix
	Given transform ← scaling(2, 3, 4)
	And inv ← inverse(transform)
	And v ← vector(-4, 6, 8)
	Then inv * v = vector(-2, 2, 2) */
	print_matrix(
		matrix_multiplication(
			matrix_inversion(rt_scaling(rt_vector(2, 3, 4))), 
			convert_tuple_to_matrix(rt_point(-4, 6, 8))));

	/* test 4: Reflection is scaling by a negative value
	Given transform ← scaling(-1, 1, 1)
	And p ← point(2, 3, 4)
	Then transform * p = point(-2, 3, 4) */
	print_matrix(
		matrix_multiplication(
			rt_scaling(rt_vector(-1, 1, 1)), 
			convert_tuple_to_matrix(rt_point(2, 3, 4))));
}

void	test_translation()
{
	printf("\n*********************************\nTesting translation transformations:\n*********************************\n");
	
	/* test 1: Multiplying by a translation matrix
	Given transform ← translation(5, -3, 2)
	And p ← point(-3, 4, 5)
	Then transform * p = point(2, 1, 7) */
	print_matrix(
		matrix_multiplication(
			rt_translation(rt_vector(5, -3, 2)), 
			convert_tuple_to_matrix(rt_point(-3, 4, 5))));

	/*  test 2: Multiplying by the inverse of a translation matrix
	Given transform ← translation(5, -3, 2)
	And inv ← inverse(transform)
	And p ← point(-3, 4, 5)
	Then inv * p = point(-8, 7, 3 */
	print_matrix(
	matrix_multiplication(
		matrix_inversion(rt_translation(rt_vector(5, -3, 2))), 
		convert_tuple_to_matrix(rt_point(-3, 4, 5))));

	/* test 3: Translation does not affect vectors
	Given transform ← translation(5, -3, 2)
	And v ← vector(-3, 4, 5)
	Then transform * v = v */
	print_matrix(
	matrix_multiplication(
		rt_translation(rt_vector(5, -3, 2)), 
		convert_tuple_to_matrix(rt_vector(-3, 4, 5))));

}

void	test_shear()
{
	printf("\n*********************************\nTesting shearing transformations:\n*********************************\n");

	/* test 0 :
	shearing(1, 0, 0, 0, 0, 0)
	And p ← point(2, 3, 4)
	Then transform * p = point(5, 3, 4)
 	*/
	print_matrix(
		matrix_multiplication(
			rt_shearing((float[6]) {1.0, 0.0, 0.0, 0.0, 0.0, 0.0}), 
			convert_tuple_to_matrix(rt_point(2, 3, 4))));

	/* test 1 :
	shearing(0, 1, 0, 0, 0, 0)
	And p ← point(2, 3, 4)
	Then transform * p = point(6, 3, 4)
 	*/
	print_matrix(
		matrix_multiplication(
			rt_shearing((float[6]) {0.0, 1.0, 0.0, 0.0, 0.0, 0.0}), 
			convert_tuple_to_matrix(rt_point(2, 3, 4))));

	/* test 2: 
	A shearing transformation moves y in proportion to x
	Given transform ← shearing(0, 0, 1, 0, 0, 0)
	And p ← point(2, 3, 4)
	Then transform * p = point(2, 5, 4) */
	print_matrix(
		matrix_multiplication(
			rt_shearing((float[6]) {0.0, 0.0, 1.0, 0.0, 0.0, 0.0}), 
			convert_tuple_to_matrix(rt_point(2, 3, 4))));

	/* test 3:
	A shearing transformation moves y in proportion to z
	Given transform ← shearing(0, 0, 0, 1, 0, 0)
	And p ← point(2, 3, 4)
	Then transform * p = point(2, 7, 4) */
	print_matrix(
		matrix_multiplication(
			rt_shearing((float[6]) {0.0, 0.0, 0.0, 1.0, 0.0, 0.0}), 
			convert_tuple_to_matrix(rt_point(2, 3, 4))));

	/* test 4:
	A shearing transformation moves z in proportion to x
	Given transform ← shearing(0, 0, 0, 0, 1, 0)
	And p ← point(2, 3, 4)
	Then transform * p = point(2, 3, 6) */
	print_matrix(
		matrix_multiplication(
			rt_shearing((float[6]) {0.0, 0.0, 0.0, 0.0, 1.0, 0.0}), 
			convert_tuple_to_matrix(rt_point(2, 3, 4))));

	/* test 5:
	A shearing transformation moves z in proportion to y
	Given transform ← shearing(0, 0, 0, 0, 0, 1)
	And p ← point(2, 3, 4)
	Then transform * p = point(2, 3, 7) */
		print_matrix(
		matrix_multiplication(
			rt_shearing((float[6]) {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}), 
			convert_tuple_to_matrix(rt_point(2, 3, 4))));

}
